name: ðŸ¤– Android Builds
on:
  workflow_call:
    inputs:
      build_sha:
        description: "Build commit SHA to use for this job"
        required: true
        type: string
      runner_id:
        description: "Runner ID of the Parent Runner"
        required: true
        type: string


# Global Settings
env:
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: blazium-dev
  SCONSFLAGS: verbose=yes warnings=no werror=no debug_symbols=no progress=no generate_apk=yes module_text_server_fb_enabled=yes
  BUILD_FLAG: ${{ github.event.client_payload.production && 'production=yes' || 'use_static_cpp=yes' }}
  TEMPLATE_TYPE: ${{ github.event.client_payload.production && 'template_release' || 'template_debug' }}
  BUILD_TYPE: ${{ github.event.client_payload.type || 'nightly' }}
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  TSAN_OPTIONS: suppressions=misc/error_suppressions/tsan.txt
  TERM: 'xterm'
  DISPLAY: ':0'
  DEPLOY_TYPE: android

concurrency:
  group: ci-${{github.actor}}-${{ github.event.client_payload.type || 'nightly' }}-android
  cancel-in-progress: true

jobs:
    android-editors:
      runs-on: "ubuntu-20.04"
      name: ${{ matrix.name }}
      strategy:
        max-parallel: 2
        fail-fast: false
        matrix:
          include:
            - name: Editor (target=editor, arch=arm64, ${{ github.event.client_payload.production && 'production=yes' || 'use_static_cpp=yes' }})
              cache-name: android-editor-arm64
              target: editor
              tests: false
              sconsflags: arch=arm64 ${{ github.event.client_payload.production && 'production=yes' || 'use_static_cpp=yes' }}
              mono: false

            - name: Editor (target=editor, arch=arm32, ${{ github.event.client_payload.production && 'production=yes' || 'use_static_cpp=yes' }})
              cache-name: android-editor-arm32
              target: editor
              tests: false
              sconsflags: arch=arm32 ${{ github.event.client_payload.production && 'production=yes' || 'use_static_cpp=yes' }}
              mono: false

            - name: Editor (target=editor, arch=x86_64, ${{ github.event.client_payload.production && 'production=yes' || 'use_static_cpp=yes' }})
              cache-name: android-editor-x86_64
              target: editor
              tests: false
              sconsflags: arch=x86_64 ${{ github.event.client_payload.production && 'production=yes' || 'use_static_cpp=yes' }}
              mono: false

            - name: Editor (target=editor, arch=x86_32, ${{ github.event.client_payload.production && 'production=yes' || 'use_static_cpp=yes' }})
              cache-name: android-editor-x86_32
              target: editor
              tests: false
              sconsflags: arch=x86_32 ${{ github.event.client_payload.production && 'production=yes' || 'use_static_cpp=yes' }}
              mono: false

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          with:
            repository: blazium-engine/blazium
            ref: ${{ inputs.build_sha }}
            submodules: recursive
            fetch-depth: 2

        - name: Remove existing workflows folder
          run: |
            rm -rf .github/workflows

        - name: Pull .github folder from ci_cd repository
          run: |
            git clone --depth=1 https://github.com/blazium-engine/ci_cd.git ci_cd_repo
            cp -r ci_cd_repo/.github/* .github/
            rm -rf ci_cd_repo

        - name: Set up Java 17
          uses: actions/setup-java@v4
          with:
            distribution: temurin
            java-version: 17

        - name: Restore Godot build cache
          uses: ./.github/actions/godot-cache-restore
          with:
            cache-name: ${{ matrix.cache-name }}
          continue-on-error: true

        - name: Setup Python and SCons
          uses: ./.github/actions/godot-deps

        - name: Download and extract mono-glue
          if: matrix.mono
          run: |
            TYPE=${{ github.event.client_payload.type || 'nightly' }}
            URL="https://cdn.blazium.app/monoglue/${TYPE}/monoglue-${TYPE}.tar.gz"
            
            # Download the file
            curl -L $URL -o monoglue.tar.gz

            # Extract the entire archive to a temporary directory
            mkdir -p temp_extract
            tar -xzvf monoglue.tar.gz -C temp_extract

            # Create target directories if they don't exist
            mkdir -p modules/mono/glue/GodotSharp/GodotSharp
            mkdir -p modules/mono/glue/GodotSharp/GodotSharpEditor

            # Move the extracted folders to their target locations
            mv temp_extract/GodotSharp/* modules/mono/glue/GodotSharp/GodotSharp/
            mv temp_extract/GodotSharpEditor/* modules/mono/glue/GodotSharp/GodotSharpEditor/

            # Clean up the temporary directory
            rm -rf temp_extract monoglue.tar.gz

        - name: Compilation
          uses: ./.github/actions/godot-build
          with:
            sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
            platform: android
            target: ${{ matrix.target }}
            tests: ${{ matrix.tests }}

        - name: Save Godot build cache
          uses: ./.github/actions/godot-cache-save
          with:
            cache-name: ${{ matrix.cache-name }}
          continue-on-error: true

        - name: Notify Cerebro of Build Starting
          uses: ./.github/actions/cerebro-started
          with:
            name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
            run_id: ${{ inputs.runner_id }}
            cerebro_url: ${{ secrets.CEREBRO_URL }}
            cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
            build_type: editor
            mono: ${{ matrix.mono }}
            deploy_type: ${{ github.event.client_payload.type || 'nightly' }}
            branch: ${{ github.event.client_payload.branch }}
            build_os: android
            checksum: ${{ inputs.build_sha }}
            production: ${{ github.event.client_payload.production }}



        - name: Generate Godot Meta editor
          run: |
            cd platform/android/java
            ./gradlew generateGodotEditor
            cd ../../..
            ls -l bin/android_editor_builds/

        - name: Create tar.gz Archive
          run: |
            tar -czvf ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz -C ./bin/android_editor_builds/ .

        - uses: BetaHuhn/do-spaces-action@v2
          with:
            access_key: ${{ secrets.DO_ACCESS_KEY }}
            secret_key: ${{ secrets.DO_SECRET_KEY }}
            space_name: ${{ secrets.DO_SPACE_NAME }}
            space_region: ${{ secrets.DO_SPACE_REGION }}
            source: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
            out_dir: ${{ env.DEPLOY_TYPE }}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}


        - name: Upload artifact
          uses: ./.github/actions/upload-artifact
          with:
            name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}

        - name: Notify Cerebro of Build Success
          if: success() # Only runs if the job was successful
          uses: ./.github/actions/cerebro-completed
          with:
            name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
            run_id: ${{ inputs.runner_id }}
            file_url: ${{ secrets.CDN_URL }}/${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
            version: ""
            cerebro_url: ${{ secrets.CEREBRO_URL }}
            cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

        - name: Notify Cerebro of Build Failure
          if: failure() || cancelled() # Triggers if the job fails or is canceled
          uses: ./.github/actions/cerebro-failed
          with:
            name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
            run_id: ${{ inputs.runner_id }}
            cerebro_url: ${{ secrets.CEREBRO_URL }}
            cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

        - name: Clear folder
          run: |
            rm -rf bin/android_editor_builds/*

        - name: Notify Cerebro of Build Starting
          uses: ./.github/actions/cerebro-started
          with:
            name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}-meta
            run_id: ${{ inputs.runner_id }}
            cerebro_url: ${{ secrets.CEREBRO_URL }}
            cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
            build_type: template
            mono: ${{ matrix.mono }}
            deploy_type: ${{ github.event.client_payload.type || 'nightly' }}
            branch: ${{ github.event.client_payload.branch }}
            build_os: android
            checksum: ${{ inputs.build_sha }}
            production: ${{ github.event.client_payload.production }}



        - name: Generate Godot Meta editor
          run: |
            cd platform/android/java
            ./gradlew generateGodotMetaEditor
            cd ../../..
            ls -l bin/android_editor_builds/

        - name: Create tar.gz Archive
          run: |
            tar -czvf ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}-meta.tar.gz -C ./bin/android_editor_builds/ .

        - uses: BetaHuhn/do-spaces-action@v2
          with:
            access_key: ${{ secrets.DO_ACCESS_KEY }}
            secret_key: ${{ secrets.DO_SECRET_KEY }}
            space_name: ${{ secrets.DO_SPACE_NAME }}
            space_region: ${{ secrets.DO_SPACE_REGION }}
            source: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}-meta.tar.gz
            out_dir: ${{ env.DEPLOY_TYPE }}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}


        - name: Upload artifact
          uses: ./.github/actions/upload-artifact
          with:
            name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}-meta

        - name: Notify Cerebro of Build Success
          if: success() # Only runs if the job was successful
          uses: ./.github/actions/cerebro-completed
          with:
            name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}-meta
            run_id: ${{ inputs.runner_id }}
            file_url: ${{ secrets.CDN_URL }}/${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
            version: ""
            cerebro_url: ${{ secrets.CEREBRO_URL }}
            cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

        - name: Notify Cerebro of Build Failure
          if: failure() || cancelled() # Triggers if the job fails or is canceled
          uses: ./.github/actions/cerebro-failed
          with:
            name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}-meta
            run_id: ${{ inputs.runner_id }}
            cerebro_url: ${{ secrets.CEREBRO_URL }}
            cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
    android-templates:
      runs-on: "ubuntu-20.04"
      name: ${{ matrix.name }}
      strategy:
        max-parallel: 6
        fail-fast: false
        matrix:
          include:
            - name: Template (target=template_release, arch=arm64)
              cache-name: android-release-template-arm64
              target: template_release
              tests: false
              sconsflags: arch=arm64 
              mono: false

            - name: Template (target=template_debug, arch=arm32)
              cache-name: android-debug-template-arm32
              target: template_debug
              tests: false
              sconsflags: arch=arm32 
              mono: false

            - name: Template (target=template_debug, arch=arm64)
              cache-name: android-debug-template-arm64
              target: template_debug
              tests: false
              sconsflags: arch=arm64 
              mono: false

            - name: Template (target=template_release, arch=arm32)
              cache-name: android-release-template-arm32
              target: template_release
              tests: false
              sconsflags: arch=arm32 
              mono: false

            - name: Template (target=template_release, arch=x86_64)
              cache-name: android-template-x86_64
              target: template_release
              tests: false
              sconsflags: arch=x86_64 
              mono: false

            - name: Template (target=template_debug, arch=x86_64)
              cache-name: android-debug-template-x86_64
              target: template_debug
              tests: false
              sconsflags: arch=x86_64 
              mono: false

            - name: Template (target=template_release, arch=x86_32)
              cache-name: android-template-x86_32
              target: template_release
              tests: false
              sconsflags: arch=x86_32 
              mono: false

            - name: Template (target=template_debug, arch=x86_32)
              cache-name: android-debug-template-x86_32
              target: template_debug
              tests: false
              sconsflags: arch=x86_32 
              mono: false
  # BREAK FOR MONO
            - name: Template/w Mono (target=template_release, arch=arm64, module_mono_enabled=yes)
              cache-name: android-release-template-arm64-mono
              target: template_release
              tests: false
              sconsflags: arch=arm64  module_mono_enabled=yes
              mono: true

            - name: Template/w Mono (target=template_debug, arch=arm32, module_mono_enabled=yes)
              cache-name: android-debug-template-arm32-mono
              target: template_debug
              tests: false
              sconsflags: arch=arm32  module_mono_enabled=yes
              mono: true

            - name: Template/w Mono (target=template_debug, arch=arm64, module_mono_enabled=yes)
              cache-name: android-debug-template-arm64-mono
              target: template_debug
              tests: false
              sconsflags: arch=arm64  module_mono_enabled=yes
              mono: true

            - name: Template/w Mono (target=template_release, arch=arm32, module_mono_enabled=yes)
              cache-name: android-release-template-arm32-mono
              target: template_release
              tests: false
              sconsflags: arch=arm32  module_mono_enabled=yes
              mono: true

            - name: Template/w Mono (target=template_release, arch=x86_64, module_mono_enabled=yes)
              cache-name: android-template-x86_64-mono
              target: template_release
              tests: false
              sconsflags: arch=x86_64  module_mono_enabled=yes
              mono: true

            - name: Template/w Mono (target=template_debug, arch=x86_64, module_mono_enabled=yes)
              cache-name: android-debug-template-x86_64-mono
              target: template_debug
              tests: false
              sconsflags: arch=x86_64  module_mono_enabled=yes
              mono: true

            - name: Template/w Mono (target=template_release, arch=x86_32, module_mono_enabled=yes)
              cache-name: android-template-x86_32-mono
              target: template_release
              tests: false
              sconsflags: arch=x86_32  module_mono_enabled=yes
              mono: true

            - name: Template/w Mono (target=template_debug, arch=x86_32, module_mono_enabled=yes)
              cache-name: android-debug-template-x86_32-mono
              target: template_debug
              tests: false
              sconsflags: arch=x86_32  module_mono_enabled=yes
              mono: true

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          with:
            repository: blazium-engine/blazium
            ref: ${{ inputs.build_sha }}
            submodules: recursive
            fetch-depth: 2

        - name: Remove existing workflows folder
          run: |
            rm -rf .github/workflows

        - name: Pull .github folder from ci_cd repository
          run: |
            git clone --depth=1 https://github.com/blazium-engine/ci_cd.git ci_cd_repo
            cp -r ci_cd_repo/.github/* .github/
            rm -rf ci_cd_repo

        - name: Notify Cerebro of Build Starting
          uses: ./.github/actions/cerebro-started
          with:
            name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
            run_id: ${{ inputs.runner_id }}
            cerebro_url: ${{ secrets.CEREBRO_URL }}
            cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
            build_type: template
            mono: ${{ matrix.mono }}
            deploy_type: ${{ github.event.client_payload.type || 'nightly' }}
            branch: ${{ github.event.client_payload.branch }}
            build_os: android
            checksum: ${{ inputs.build_sha }}
            production: ${{ github.event.client_payload.production }}


        - name: Set up Java 17
          uses: actions/setup-java@v4
          with:
            distribution: temurin
            java-version: 17

        - name: Restore Godot build cache
          uses: ./.github/actions/godot-cache-restore
          with:
            cache-name: ${{ matrix.cache-name }}
          continue-on-error: true

        - name: Setup Python and SCons
          uses: ./.github/actions/godot-deps

        - name: Download and extract mono-glue
          if: matrix.mono
          run: |
            TYPE=${{ github.event.client_payload.type || 'nightly' }}
            URL="https://cdn.blazium.app/${TYPE}/monoglue/monoglue-${TYPE}.tar.gz"
            
            # Download the file
            curl -L $URL -o monoglue.tar.gz

            # Create target directories if they don't exist
            mkdir -p modules/mono/glue/GodotSharp/GodotSharp
            mkdir -p modules/mono/glue/GodotSharp/GodotSharpEditor

            # Extract the specific directories from the tar.gz file to their target locations
            tar -xzvf monoglue.tar.gz --strip-components=1 -C modules/mono/glue/GodotSharp/GodotSharp GodotSharp
            tar -xzvf monoglue.tar.gz --strip-components=1 -C modules/mono/glue/GodotSharp/GodotSharpEditor GodotSharpEditor


        - name: Compilation
          uses: ./.github/actions/godot-build
          with:
            sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
            platform: android
            target: ${{ matrix.target }}
            tests: ${{ matrix.tests }}

        - name: Save Godot build cache
          uses: ./.github/actions/godot-cache-save
          with:
            cache-name: ${{ matrix.cache-name }}
          continue-on-error: true

        - name: Generate Godot templates
          run: |
            cd platform/android/java
            ./gradlew generateGodotTemplates
            cd ../../..
            ls -l bin/
        - name: Create tar.gz Archive
          run: |
            tar -czvf ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz -C ./bin .

        - uses: BetaHuhn/do-spaces-action@v2
          with:
            access_key: ${{ secrets.DO_ACCESS_KEY }}
            secret_key: ${{ secrets.DO_SECRET_KEY }}
            space_name: ${{ secrets.DO_SPACE_NAME }}
            space_region: ${{ secrets.DO_SPACE_REGION }}
            source: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
            out_dir: ${{ env.DEPLOY_TYPE }}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}


        - name: Upload artifact
          uses: ./.github/actions/upload-artifact
          with:
            name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}

        - name: Notify Cerebro of Build Success
          if: success() # Only runs if the job was successful
          uses: ./.github/actions/cerebro-completed
          with:
            name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
            run_id: ${{ inputs.runner_id }}
            file_url: ${{ secrets.CDN_URL }}/${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
            version: ""
            cerebro_url: ${{ secrets.CEREBRO_URL }}
            cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

        - name: Notify Cerebro of Build Failure
          if: failure() || cancelled() # Triggers if the job fails or is canceled
          uses: ./.github/actions/cerebro-failed
          with:
            name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
            run_id: ${{ inputs.runner_id }}
            cerebro_url: ${{ secrets.CEREBRO_URL }}
            cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
name: üçé macOS Builds
on:
  workflow_call:
    inputs:
      build_sha:
        description: "Build commit SHA to use for this job"
        required: true
        type: string
      runner_id:
        description: "Runner ID of the Parent Runner"
        required: true
        type: string

# Global Settings
env:
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: blazium-dev
  SCONSFLAGS: verbose=yes warnings=no werror=no debug_symbols=no progress=no

concurrency:
  group: ci-${{github.actor}}-${{ github.event.client_payload.type || 'nightly' }}-macos
  cancel-in-progress: true

jobs:
  build-editors:
    runs-on: "macos-latest"
    name: ${{ matrix.name }}
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        include:
          - name: Editor
            cache-name: macos-editor
            target: editor
            sconsflags: ${{ github.event.client_payload.production && 'production=yes' || '' }}
            mono: false

          - name: Editor/w MONO
            cache-name: macos-editor-mono
            target: editor
            sconsflags: ${{ github.event.client_payload.production && 'production=yes' || '' }}
            mono: true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/blazium
          ref: ${{ inputs.build_sha }}
          submodules: recursive
          fetch-depth: 2

      - name: Notify Cerebro of Build Starting
        uses: ./.github/actions/cerebro-started
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
          build_type: editor
          mono: ${{ matrix.mono }}
          deploy_type: ${{ github.event.client_payload.type || 'nightly' }}
          branch: ${{ github.event.client_payload.branch }}
          build_os: macos
          checksum: ${{ inputs.build_sha }}
          production: ${{ github.event.client_payload.production }}

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Download and extract mono-glue
        if: matrix.mono
        run: |
          TYPE=${{ github.event.client_payload.type || 'nightly' }}
          URL="https://cdn.blazium.app/${TYPE}/monoglue/monoglue-${TYPE}.tar.gz"
          
          # Download the file
          curl -L $URL -o monoglue.tar.gz

          # Create target directories if they don't exist
          mkdir -p modules/mono/glue/GodotSharp/GodotSharp
          mkdir -p modules/mono/glue/GodotSharp/GodotSharpEditor

          # Extract the specific directories from the tar.gz file to their target locations
          tar -xzvf monoglue.tar.gz --strip-components=1 -C modules/mono/glue/GodotSharp/GodotSharp GodotSharp
          tar -xzvf monoglue.tar.gz --strip-components=1 -C modules/mono/glue/GodotSharp/GodotSharpEditor GodotSharpEditor

      - name: Setup Vulkan SDK
        run: |
          sh misc/scripts/install_vulkan_sdk_macos.sh
          ls -la /usr/local

      # - name: Download and extract MoltenVK
      #   run: |
      #     mkdir -p deps/moltenvk
      #     pushd deps/moltenvk
      #     curl -L -o moltenvk.tar https://github.com/godotengine/moltenvk-osxcross/releases/download/vulkan-sdk-1.3.283.0-2/MoltenVK-all.tar
      #     tar xf moltenvk.tar && rm -f moltenvk.tar
      #     mv MoltenVK/MoltenVK/include/ MoltenVK/
      #     mv MoltenVK/MoltenVK/static/MoltenVK.xcframework/ MoltenVK/
      #     popd

      - name: Editor Compilation (x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} arch=x86_64
          platform: macos
          target: ${{ matrix.target }}
          tests: false

      - name: Editor Compilation (arm64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} arch=arm64
          platform: macos
          target: ${{ matrix.target }}
          tests: false

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Prepare Editor
        run: |
          lipo -create ./bin/blazium.macos.${{ matrix.target }}.x86_64${{ matrix.mono && ".mono" || "" }} ./bin/blazium.macos.${{ matrix.target }}.arm64${{ matrix.mono && ".mono" || "" }} -output ./bin/blazium.macos.${{ matrix.target }}.universal${{ matrix.mono && ".mono" || "" }}
          ${{ matrix.mono && "./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=macos" || "" }}
          rm ./bin/blazium.macos.${{ matrix.target }}.x86_64${{ matrix.mono && ".mono" || "" }} ./bin/blazium.macos.${{ matrix.target }}.arm64${{ matrix.mono && ".mono" || "" }}
          strip bin/blazium.*
          chmod +x bin/blazium.*

      - name: Package Editor
        run: |
          cp -r misc/dist/macos_tools.app ./Blazium${{ matrix.mono && "_mono" || "" }}.app
          mkdir -p Blazium${{ matrix.mono && "_mono" || "" }}.app/Contents/MacOS
          cp bin/blazium.macos.${{ matrix.target }}.universal${{ matrix.mono && ".mono" || "" }} Godot${{ matrix.mono && "_mono" || "" }}.app/Contents/MacOS/Blazium
          ${{ matrix.mono && "cp -rp ./bin/GodotSharp Blazium{{ matrix.mono && "_mono" || "" }}.app/Contents/Resources/GodotSharp" || "" }}
          chmod +x Blazium${{ matrix.mono && "_mono" || "" }}.app/Contents/MacOS/Blazium
          codesign --force --timestamp --options=runtime --entitlements misc/dist/macos/editor${{ github.event.client_payload.production && '' || '_debug' }}.entitlements -s - Blazium{{ matrix.mono && "_mono" || "" }}.app
          zip -q -9 -r "Blazium_macos.universal.zip" Blazium{{ matrix.mono && "_mono" || "" }}.app

      - name: Upload Editor artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}
          path: ./bin/blazium.macos.${{ matrix.target }}.universal${{ matrix.mono && ".mono" || "" }}
          
      - name: Upload Packaged Editor artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}
          path: Blazium_macos.universal.zip
      
      - name: Create tar.gz Archive
        run: |
          tar -czvf ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz -C ./Blazium_macos.universal.zip .

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          out_dir: macos/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}



      - name: Notify Cerebro of Build Success
        uses: ./.github/actions/cerebro-completed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          file_url: ${{ secrets.CDN_URL }}/macos/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          version: ""
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

      - name: Notify Cerebro of Build Failure
        uses: ./.github/actions/cerebro-failed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

  build-templates:
    runs-on: "macos-latest"
    name: ${{ matrix.name }}
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        include:
          - name: Template
            cache-name: macos-template
            target: template_release
            mono: false
            sconsflags: debug_symbols=no ${{ github.event.client_payload.production && 'production=yes' || '' }}

          - name: Template/w MONO
            cache-name: macos-template-mono
            target: template_release
            mono: true
            sconsflags: debug_symbols=no ${{ github.event.client_payload.production && 'production=yes' || '' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/blazium
          ref: ${{ inputs.build_sha }}
          submodules: recursive
          fetch-depth: 2

      - name: Notify Cerebro of Build Starting
        uses: ./.github/actions/cerebro-started
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
          build_type: template
          mono: ${{ matrix.mono }}
          deploy_type: ${{ github.event.client_payload.type || 'nightly' }}
          branch: ${{ github.event.client_payload.branch }}
          build_os: macos
          checksum: ${{ inputs.build_sha }}
          production: ${{ github.event.client_payload.production }}


      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Download and extract mono-glue
        if: matrix.mono
        run: |
          TYPE=${{ github.event.client_payload.type || 'nightly' }}
          URL="https://cdn.blazium.app/${TYPE}/monoglue/monoglue-${TYPE}.tar.gz"
          
          # Download the file
          curl -L $URL -o monoglue.tar.gz

          # Create target directories if they don't exist
          mkdir -p modules/mono/glue/GodotSharp/GodotSharp
          mkdir -p modules/mono/glue/GodotSharp/GodotSharpEditor

          # Extract the specific directories from the tar.gz file to their target locations
          tar -xzvf monoglue.tar.gz --strip-components=1 -C modules/mono/glue/GodotSharp/GodotSharp GodotSharp
          tar -xzvf monoglue.tar.gz --strip-components=1 -C modules/mono/glue/GodotSharp/GodotSharpEditor GodotSharpEditor

      - name: Setup Vulkan SDK
        run: |
          sh misc/scripts/install_vulkan_sdk_macos.sh
          ls -la /usr/local

      # - name: Download and extract MoltenVK
      #   run: |
      #     mkdir -p deps/moltenvk
      #     pushd deps/moltenvk
      #     curl -L -o moltenvk.tar https://github.com/godotengine/moltenvk-osxcross/releases/download/vulkan-sdk-1.3.283.0-2/MoltenVK-all.tar
      #     tar xf moltenvk.tar && rm -f moltenvk.tar
      #     mv MoltenVK/MoltenVK/include/ MoltenVK/
      #     mv MoltenVK/MoltenVK/static/MoltenVK.xcframework/ MoltenVK/
      #     popd



      - name: Compilation (template_release, arm64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=arm64 ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: macos
          target: template_release
          tests: false

      - name: Compilation (template_debug, arm64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=arm64 ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: macos
          target: template_debug
          tests: false

      - name: Compilation (template_release, x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=x86_64 ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: macos
          target: template_release
          tests: false

      - name: Compilation (template_debug, x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=x86_64 ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: macos
          target: template_debug
          tests: false

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Prepare Template
        run: |
          lipo -create ./bin/blazium.macos.template_release.x86_64{{ matrix.mono && ".mono" || "" }} ./bin/blazium.macos.template_release.arm64{{ matrix.mono && ".mono" || "" }} -output ./bin/blazium.macos.template_release.universal{{ matrix.mono && ".mono" || "" }}
          lipo -create ./bin/blazium.macos.template_debug.x86_64{{ matrix.mono && ".mono" || "" }} ./bin/blazium.macos.template_debug.arm64{{ matrix.mono && ".mono" || "" }} -output ./bin/blazium.macos.template_debug.universal{{ matrix.mono && ".mono" || "" }}
          rm ./bin/blazium.macos.template_release.x86_64{{ matrix.mono && ".mono" || "" }} ./bin/blazium.macos.template_release.arm64{{ matrix.mono && ".mono" || "" }}
          rm ./bin/blazium.macos.template_debug.x86_64{{ matrix.mono && ".mono" || "" }} ./bin/blazium.macos.template_debug.arm64{{ matrix.mono && ".mono" || "" }}
          strip bin/blazium.*
          chmod +x bin/blazium.*

      - name: Package Template
        run: |
          cp -r misc/dist/macos_template.app .
          mkdir -p macos_template.app/Contents/{MacOS,Resources}
          cp bin/blazium.macos.template_release.universal{{ matrix.mono && ".mono" || "" }} macos_template.app/Contents/MacOS/blazium_macos_release.universal{{ matrix.mono && ".mono" || "" }}
          cp bin/blazium.macos.template_debug.universal{{ matrix.mono && ".mono" || "" }} macos_template.app/Contents/MacOS/blazium_macos_debug.universal{{ matrix.mono && ".mono" || "" }}
          chmod +x macos_template.app/Contents/MacOS/blazium_macos*
          ---
          cp -r misc/dist/macos_tools.app ./Blazium${{ matrix.mono && "_mono" || "" }}.app
          mkdir -p Blazium${{ matrix.mono && "_mono" || "" }}.app/Contents/MacOS
          cp bin/blazium.macos.${{ matrix.target }}.universal${{ matrix.mono && ".mono" || "" }} Blazium${{ matrix.mono && "_mono" || "" }}.app/Contents/MacOS/Blazium
          ${{ matrix.mono && "cp -rp ./bin/GodotSharp Blazium{{ matrix.mono && "_mono" || "" }}.app/Contents/Resources/GodotSharp" || "" }}
          chmod +x Blazium${{ matrix.mono && "_mono" || "" }}.app/Contents/MacOS/Blazium
          codesign --force --timestamp --options=runtime --entitlements misc/dist/macos/editor${{ github.event.client_payload.production && '' || '_debug' }}.entitlements -s - Blazium{{ matrix.mono && "_mono" || "" }}.app
          zip -q -9 -r "Blazium_macos.universal.zip" Blazium{{ matrix.mono && "_mono" || "" }}.app
      
      - name: Create tar.gz Archive
        run: |
          tar -czvf ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz -C ./Blazium_macos.universal.zip .

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          out_dir: macos/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}



      - name: Notify Cerebro of Build Success
        uses: ./.github/actions/cerebro-completed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          file_url: ${{ secrets.CDN_URL }}/macos/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          version: ""
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

      - name: Notify Cerebro of Build Failure
        uses: ./.github/actions/cerebro-failed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
name: Mono Glue Build
on:
  workflow_call:
    inputs:
      build_sha:
        description: "Build commit SHA to use for this job"
        required: true
        type: string
      runner_id:
        description: "Runner ID of the Parent Runner"
        required: true
        type: string
      new_major:
        description: "New Major # for Version"
        required: true
        type: string
      new_minor:
        description: "New Minor # for Version"
        required: true
        type: string
      new_patch:
        description: "New Patch # for Version"
        required: true
        type: string
      new_version:
        description: "New Version that'll be Deployed"
        required: true
        type: string

# Global Settings
env:
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: blazium-dev
  SCONSFLAGS: verbose=yes warnings=no werror=no debug_symbols=no progress=no use_static_cpp=no
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  TSAN_OPTIONS: suppressions=misc/error_suppressions/tsan.txt
  TERM: 'xterm'
  DISPLAY: ':0'
  DEPLOY_TYPE: monoglue

concurrency:
  group: ci-${{github.actor}}-${{ github.event.client_payload.type || 'nightly' }}-monoglue
  cancel-in-progress: true

jobs:

  compile-check:
    name: Checking Monoglue build.sha
    runs-on: ubuntu-latest
    outputs:
      compile: ${{ steps.version-check.outputs.should_compile }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/ci_cd
          ref: nightly-testing
          fetch-depth: 1

      - name: Compilation
        id: version-check
        uses: ./.github/actions/version-checker
        with:
          deploy_type: ${{ env.DEPLOY_TYPE }}
          build_type: ${{ github.event.client_payload.type || 'nightly' }}
          build_sha: ${{ inputs.build_sha }}

  build-monoglue:
    runs-on: "ubuntu-20.04"
    needs: compile-check
    if: ${{ needs.compile-check.outputs.compile == 'true' }}
    name: Mono Editor Build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/blazium
          ref: ${{ inputs.build_sha }}
          submodules: recursive
          fetch-depth: 2

      - name: Remove existing workflows folder
        run: |
          rm -rf .github/workflows

      - name: Pull .github folder from ci_cd repository
        run: |
          git clone --depth=1 https://github.com/blazium-engine/ci_cd.git ci_cd_repo
          cp -r ci_cd_repo/.github/* .github/
          rm -rf ci_cd_repo

      - name: Update new Version Information to version.py
        uses: ./.github/actions/set-repos-version
        with:
          file_path: ${{ github.workspace }}/version.py
          external_major: ${{ inputs.new_major }}
          external_minor: ${{ inputs.new_minor }}
          external_patch: ${{ inputs.new_patch }}
          external_status: ${{ github.event.client_payload.type || 'nightly' }}
          external_sha: ${{ inputs.build_sha }}


      # Install Linux dependencies for tests
      - name: Linux dependencies for tests
        run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys EB8B81E14DA65431D7504EA8F63F0F2B90935439
          sudo add-apt-repository "deb https://ppa.launchpadcontent.net/kisak/turtle/ubuntu focal main"
          sudo apt-get install -qq mesa-vulkan-drivers

      # Install wayland-scanner dependency
      - name: wayland-scanner dependency
        run: |
          sudo apt-get install libwayland-bin

      # Free up disk space on the runner
      - name: Free disk space on runner
        run: |
          echo "Disk usage before:" && df -h
          sudo rm -rf /usr/local/lib/android
          echo "Disk usage after:" && df -h

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: ${{ env.DEPLOY_TYPE }}-${{ github.event.client_payload.type || 'nightly' }}
        continue-on-error: true

      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Setup GCC problem matcher
        uses: ammaraskar/gcc-problem-matcher@master

      - name: Notify Cerebro of Build Starting
        uses: ./.github/actions/cerebro-started
        with:
          name: ${{ env.DEPLOY_TYPE }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
          build_type: editor
          mono: true
          deploy_type: ${{ github.event.client_payload.type || 'nightly' }}
          branch: ${{ github.event.client_payload.branch }}
          build_os: linux
          checksum: ${{ inputs.build_sha }}
          production: ${{ github.event.client_payload.production }}
          version: ${{ inputs.new_version }}

      - name: Compilation
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} module_mono_enabled=yes
          platform: linuxbsd
          target: editor
          tests: false

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: ${{ env.DEPLOY_TYPE }}-${{ github.event.client_payload.type || 'nightly' }}
        continue-on-error: true

      - name: Generate C# glue
        run: |
          ./bin/blazium.linuxbsd.editor.x86_64.mono --headless --generate-mono-glue ./modules/mono/glue

      - name: Generate Nuget Packages
        run: |
          mkdir -p nupkgs
          python modules/mono/build_scripts/build_assemblies.py --godot-output-dir ./bin --push-nupkgs-local "./nupkgs"
      # - uses: bioblaze/sslcom-code-signer@v5
      #   with:
      #     command: sign
      #     username: ${{ secrets.ES_USERNAME }}
      #     password: ${{ secrets.ES_PASSWORD }}
      #     credential_id: ${{ secrets.CREDENTIAL_ID }}
      #     totp_secret: ${{ secrets.ES_TOTP_SECRET }}
      #     dir_path: "./nupkgs"
      #     output_path: "./nupkgs_signed"
      #     environment_name: PROD

      - name: Create tar.gz Archive
        run: |
          mkdir -p combined/GodotSharp
          mkdir -p combined/GodotSharpEditor

          cp -r ./modules/mono/glue/GodotSharp/GodotSharp/Generated/* combined/GodotSharp/
          cp -r ./modules/mono/glue/GodotSharp/GodotSharpEditor/Generated/* combined/GodotSharpEditor
          cd combined
          tar -czvf ../${{ env.DEPLOY_TYPE }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz .
          cd ..


      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: ${{ env.DEPLOY_TYPE }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          out_dir: ${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}

      - name: Push to NuGet
        run: |
          for pkg in ./nupkgs/*.nupkg; do
          # for pkg in ./nupkgs_signed/*.nupkg; do
          #   echo "Verifying $pkg for Signing"
          #   dotnet nuget verify "$pkg" --certificate-fingerprint $NUGET_CERT_FINGERPRINT
            echo "Pushing $pkg to NuGet.org..."
            dotnet nuget push "$pkg" --source "nuget.org" --api-key "$NUGET_API_KEY" --skip-duplicate
          done
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
          NUGET_CERT_FINGERPRINT: ${{ secrets.NUGET_CERT_FINGERPRINT }}

      - name: Create build.sha for Version Verification Later
        run: |
          echo ${{ inputs.build_sha }} >> build.sha

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: build.sha
          out_dir: ${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}

      - name: Notify Cerebro of Build Success
        if: success() # Only runs if the job was successful
        uses: ./.github/actions/cerebro-completed
        with:
          name: ${{ env.DEPLOY_TYPE }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          file_url: ${{ secrets.CDN_URL }}/${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}/${{ env.DEPLOY_TYPE }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          version: ${{ inputs.new_version }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

      - name: Notify Cerebro of Build Failure
        if: failure() || cancelled() # Triggers if the job fails or is canceled
        uses: ./.github/actions/cerebro-failed
        with:
          name: ${{ env.DEPLOY_TYPE }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
